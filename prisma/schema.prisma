// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  role          Role      @default(USER)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  documents     Document[]
  comments      Comment[]
  savedDocuments SavedDocument[]
  ratings       Rating[]
  reports       Report[]
  activities    Activity[]
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  author      String?
  publisher   String?
  language    String?
  pages       Int?
  fileUrl     String
  fileType    String
  fileSize    Int
  coverImage  String?
  publishDate DateTime?
  status      DocumentStatus @default(PENDING)
  visibility  Visibility @default(PUBLIC)
  license     String?
  allowComments Boolean @default(true)
  allowDownload Boolean @default(true)
  viewCount   Int      @default(0)
  downloadCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  
  subcategoryId String?
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])
  
  tags        TagsOnDocuments[]
  comments    Comment[]
  savedBy     SavedDocument[]
  ratings     Rating[]
  reports     Report[]
  activities  Activity[]
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Visibility {
  PUBLIC
  LIMITED
  PRIVATE
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  documents   Document[]
  subcategories Subcategory[]
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  documents   Document[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  documents   TagsOnDocuments[]
}

model TagsOnDocuments {
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  tagId       String
  tag         Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  assignedAt  DateTime @default(now())

  @@id([documentId, tagId])
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  parentId    String?
  parent      Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentToComment")
  
  likes       Int      @default(0)
}

model SavedDocument {
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  savedAt     DateTime @default(now())

  @@id([userId, documentId])
}

model Rating {
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  value       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([userId, documentId])
}

model Report {
  id          String   @id @default(cuid())
  reason      ReportReason
  description String?  @db.Text
  status      ReportStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

enum ReportReason {
  COPYRIGHT
  INAPPROPRIATE
  SPAM
  OTHER
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

model Activity {
  id          String   @id @default(cuid())
  type        ActivityType
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentId  String?
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
}

enum ActivityType {
  UPLOAD
  DOWNLOAD
  VIEW
  COMMENT
  SAVE
  RATE
  SHARE
  REPORT
}
